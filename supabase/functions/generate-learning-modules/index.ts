import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from "https://esm.sh/@supabase/supabase-js@2";

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { userId, organizationId } = await req.json();

    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const lovableApiKey = Deno.env.get('LOVABLE_API_KEY')!;

    const supabase = createClient(supabaseUrl, supabaseKey);

    // Get user's position(s)
    const { data: userPositions } = await supabase
      .from('user_positions')
      .select('position_id, positions(name, description)')
      .eq('user_id', userId)
      .eq('organization_id', organizationId);

    console.log('User positions:', userPositions?.length || 0);
    if (userPositions && userPositions.length > 0) {
      console.log('Position names:', userPositions.map((p: any) => p.positions?.name).join(', '));
    }

    // Get user's learning preferences
    const { data: preferences } = await supabase
      .from('learning_preferences')
      .select('*')
      .eq('user_id', userId)
      .single();

    console.log('User preferences:', preferences ? 'Found' : 'Not found');
    if (preferences) {
      console.log('Preferred topics:', preferences.preferred_topics?.join(', ') || 'None');
      console.log('Learning pace:', preferences.learning_pace);
      console.log('Preferred duration:', preferences.preferred_duration);
    }

    // Get organization materials
    const { data: orgMaterials } = await supabase
      .from('onboarding_materials')
      .select('title, description, file_name')
      .eq('organization_id', organizationId);

    console.log('Organization materials:', orgMaterials?.length || 0);

    const systemPrompt = `–¢–∏ - AI –∞—Å–∏—Å—Ç–µ–Ω—Ç, —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –Ω–∞–≤—á–∞–ª—å–Ω—ñ –º–æ–¥—É–ª—ñ –¥–ª—è —Å–ø—ñ–≤—Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤.

–í–ê–ñ–õ–ò–í–û: –¢–≤–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –±—É—Ç–∏ –≤–∞–ª—ñ–¥–Ω–∏–º JSON –æ–±'—î–∫—Ç–æ–º –∑ –ø–æ–ª–µ–º "modules" —â–æ –º—ñ—Å—Ç–∏—Ç—å –º–∞—Å–∏–≤ –º–æ–¥—É–ª—ñ–≤.

–ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–û –î–õ–Ø –ü–û–°–ò–õ–ê–ù–¨:
- –í–°–Ü URL –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –†–ï–ê–õ–¨–ù–ò–ú–ò —Ç–∞ –†–û–ë–û–ß–ò–ú–ò –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏
- –î–ª—è –≤—ñ–¥–µ–æ: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¢–Ü–õ–¨–ö–ò —Å–ø—Ä–∞–≤–∂–Ω—ñ YouTube –ø–æ—Å–∏–ª–∞–Ω–Ω—è (–ø–µ—Ä–µ–≤—ñ—Ä, —â–æ –≤–æ–Ω–∏ —ñ—Å–Ω—É—é—Ç—å)
- –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¢–Ü–õ–¨–ö–ò —Ä–µ–∞–ª—å–Ω—ñ —Å–∞–π—Ç–∏ (MDN, –æ—Ñ—ñ—Ü—ñ–π–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è, Stack Overflow)
- –ù–Ü–ö–û–õ–ò –Ω–µ –≤–∏–≥–∞–¥—É–π –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Ç–∏–ø—É "internal.organization.com"
- –Ø–∫—â–æ –Ω–µ –∑–Ω–∞—î—à —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è - –∫—Ä–∞—â–µ –ù–ï –¥–æ–¥–∞–≤–∞–π –π–æ–≥–æ –≤–∑–∞–≥–∞–ª—ñ
- –ö–æ–∂–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–µ —ñ –ø—Ä–∞—Ü—é—é—á–µ

–ö–æ–∂–µ–Ω –º–æ–¥—É–ª—å –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏:
- title: –Ω–∞–∑–≤–∞ –º–æ–¥—É–ª—è (–º–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª—ñ–≤)
- description: –æ–ø–∏—Å –º–æ–¥—É–ª—è (–º–∞–∫—Å–∏–º—É–º 300 —Å–∏–º–≤–æ–ª—ñ–≤)
- duration: —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —É —Ö–≤–∏–ª–∏–Ω–∞—Ö (–ù–ï –±—ñ–ª—å—à–µ 30 —Ö–≤–∏–ª–∏–Ω!)
- category: –∫–∞—Ç–µ–≥–æ—Ä—ñ—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "–¢–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó", "–ü—Ä–æ—Ü–µ—Å–∏", "–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏", "Soft skills")
- difficulty: —Ä—ñ–≤–µ–Ω—å —Å–∫–ª–∞–¥–Ω–æ—Å—Ç—ñ ("beginner", "intermediate", "advanced")
- content: —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç –º–æ–¥—É–ª—è –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Ç–∏–ø–∞–º–∏ –º–∞—Ç–µ—Ä—ñ–∞–ª—ñ–≤
- resources: –º–∞—Å–∏–≤ —Ä–µ—Å—É—Ä—Å—ñ–≤ –∑ –†–ï–ê–õ–¨–ù–ò–ú–ò –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏ (name, url, type)

–§–û–†–ú–ê–¢ content –ø–æ–≤–∏–Ω–µ–Ω –º—ñ—Å—Ç–∏—Ç–∏ –º–∞—Å–∏–≤ —Å–µ–∫—Ü—ñ–π, –∫–æ–∂–Ω–∞ —Å–µ–∫—Ü—ñ—è - —Ü–µ –æ–±'—î–∫—Ç:
{
  "type": "text" | "video" | "quiz" | "practice" | "checklist",
  "title": "–ù–∞–∑–≤–∞ —Å–µ–∫—Ü—ñ—ó",
  "content": "–í–º—ñ—Å—Ç (–¥–ª—è text - —Ç–µ–∫—Å—Ç, –¥–ª—è video - –æ–ø–∏—Å —ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è, –¥–ª—è quiz - –ø–∏—Ç–∞–Ω–Ω—è, –¥–ª—è practice - –∑–∞–≤–¥–∞–Ω–Ω—è)",
  "duration": —á–∏—Å–ª–æ —Ö–≤–∏–ª–∏–Ω –Ω–∞ —Ü—é —Å–µ–∫—Ü—ñ—é,
  "url": "–†–ï–ê–õ–¨–ù–ï –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–¥–µ–æ (–¥–ª—è type: video)",
  "items": [] // –¥–ª—è quiz (–ø–∏—Ç–∞–Ω–Ω—è –∑ –≤–∞—Ä—ñ–∞–Ω—Ç–∞–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π), checklist (—Å–ø–∏—Å–æ–∫ –ø—É–Ω–∫—Ç—ñ–≤), practice (–∫—Ä–æ–∫–∏ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è)
}

–ü—Ä–∏–∫–ª–∞–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ content:
[
  {
    "type": "text",
    "title": "–í—Å—Ç—É–ø",
    "content": "–ö–æ—Ä–æ—Ç–∫–∏–π –æ–≥–ª—è–¥ —Ç–æ–≥–æ, —â–æ –≤–∏ –≤–∏–≤—á–∏—Ç–µ...",
    "duration": 5
  },
  {
    "type": "video",
    "title": "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—É",
    "content": "–í—ñ–¥–µ–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Git",
    "url": "https://www.youtube.com/watch?v=HVsySz-h9r4",
    "duration": 10
  },
  {
    "type": "quiz",
    "title": "–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–Ω–∞–Ω—å",
    "duration": 5,
    "content": "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —Å–≤–æ—ó –∑–Ω–∞–Ω–Ω—è –∑ –æ—Å–Ω–æ–≤",
    "items": [
      {
        "question": "–©–æ —Ç–∞–∫–µ Git?",
        "options": ["–°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—é –≤–µ—Ä—Å—ñ–π", "–ú–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è", "–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö"],
        "correct": 0
      }
    ]
  },
  {
    "type": "practice",
    "title": "–ü—Ä–∞–∫—Ç–∏—á–Ω–µ –∑–∞–≤–¥–∞–Ω–Ω—è",
    "content": "–°—Ç–≤–æ—Ä—ñ—Ç—å —Å–≤—ñ–π –ø–µ—Ä—à–∏–π Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π",
    "duration": 10,
    "items": [
      "–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Git –Ω–∞ —Å–≤—ñ–π –∫–æ–º–ø'—é—Ç–µ—Ä",
      "–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–π—Ç–µ –Ω–æ–≤–∏–π —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä—ñ–π",
      "–ó—Ä–æ–±—ñ—Ç—å –ø–µ—Ä—à–∏–π –∫–æ–º—ñ—Ç"
    ]
  }
]

–°—Ç–≤–æ—Ä–∏ 3-5 –º–æ–¥—É–ª—ñ–≤ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é –¥–æ ${preferences?.preferred_duration || 30} —Ö–≤–∏–ª–∏–Ω –∫–æ–∂–µ–Ω.
–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –¥–æ—Å—Ç—É–ø–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó —Ç–∞ –∑–Ω–∞–π–¥–∏ –∫–æ—Ä–∏—Å–Ω—ñ –∑–æ–≤–Ω—ñ—à–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏.
–ü–∞–º'—è—Ç–∞–π: –∫–æ–∂–µ–Ω –º–æ–¥—É–ª—å –º–∞—î –±—É—Ç–∏ –ö–û–†–û–¢–ö–ò–ú —ñ –º—ñ—Å—Ç–∏—Ç–∏ —Ä—ñ–∑–Ω–æ–º–∞–Ω—ñ—Ç–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç.

–í–ê–ñ–õ–ò–í–û: –í—Ä–∞—Ö–æ–≤—É–π –Ω–∞—Å—Ç—É–ø–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:
- –ü–æ—Å–∞–¥–∏: ${userPositions?.map((p: any) => p.positions?.name || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ').join(', ') || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ (—Å—Ç–≤–æ—Ä–∏ –∑–∞–≥–∞–ª—å–Ω—ñ –º–æ–¥—É–ª—ñ)'}
- –¢–µ–º–∏ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è: ${preferences?.preferred_topics?.join(', ') || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ (–æ–±–∏—Ä–∞–π –∞–∫—Ç—É–∞–ª—å–Ω—ñ –¥–ª—è –ø–æ—Å–∞–¥–∏)'}
- –¢–µ–º–ø –Ω–∞–≤—á–∞–Ω–Ω—è: ${preferences?.learning_pace || 'moderate'}
- –ë–∞–∂–∞–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –º–æ–¥—É–ª—è: ${preferences?.preferred_duration || 30} —Ö–≤
- –î–æ—Å—Ç—É–ø–Ω—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ—ó: ${orgMaterials?.map((m: any) => m.title).join(', ') || '–ù–µ–º–∞—î'}

–Ø–∫—â–æ –ø–æ—Å–∞–¥–∞ –ù–ï –≤–∫–∞–∑–∞–Ω–∞ - —Å—Ç–≤–æ—Ä—é–π –∑–∞–≥–∞–ª—å–Ω—ñ –º–æ–¥—É–ª—ñ –∑ soft skills, –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ, –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—ó.
–Ø–∫—â–æ —î –ø–æ—Å–∞–¥–∞ - —Å—Ç–≤–æ—Ä—é–π –º–æ–¥—É–ª—ñ —â–æ –ø–æ—î–¥–Ω—É—é—Ç—å –∑–∞–≥–∞–ª—å–Ω—ñ –Ω–∞–≤–∏—á–∫–∏ + —Å–ø–µ—Ü–∏—Ñ—ñ—á–Ω—ñ –¥–ª—è –ø–æ—Å–∞–¥–∏.`;

    const userPrompt = `–°—Ç–≤–æ—Ä–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –Ω–∞–≤—á–∞–ª—å–Ω—ñ –º–æ–¥—É–ª—ñ –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
–ö–æ–∂–µ–Ω –º–æ–¥—É–ª—å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç (—Ç–µ–∫—Å—Ç, –≤—ñ–¥–µ–æ, –∫–≤—ñ–∑–∏, –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è).

${preferences?.preferred_topics && Array.isArray(preferences.preferred_topics) && preferences.preferred_topics.length > 0 ? `
üéØ –ü–†–Ü–û–†–ò–¢–ï–¢: –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –û–ë–û–í'–Ø–ó–ö–û–í–û —Ö–æ—á–µ –≤–∏–≤—á–∏—Ç–∏ —Ü—ñ —Ç–µ–º–∏: ${preferences.preferred_topics.join(', ')}
–í—Å—ñ –º–æ–¥—É–ª—ñ –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –ø—Ä–æ —Ü—ñ —Ç–µ–º–∏ –∞–±–æ —Ç—ñ—Å–Ω–æ –∑ –Ω–∏–º–∏ –ø–æ–≤'—è–∑–∞–Ω—ñ!
` : ''}

${userPositions && userPositions.length > 0 ? `
üíº –í–ê–ñ–õ–ò–í–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø: –ü–æ—Å–∞–¥–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: ${userPositions.map((p: any) => p.positions?.name).join(', ')}
–ú–æ–¥—É–ª—ñ –º–∞—é—Ç—å –±—É—Ç–∏ –∞–¥–∞–ø—Ç–æ–≤–∞–Ω—ñ –ø—ñ–¥ —Å–ø–µ—Ü–∏—Ñ—ñ–∫—É —Ü—ñ—î—ó –ø–æ—Å–∞–¥–∏ —Ç–∞ –≤–∫–ª—é—á–∞—Ç–∏ –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ –Ω–∞–≤–∏—á–∫–∏ –¥–ª—è –Ω–µ—ó.
` : '–°—Ç–≤–æ—Ä–∏ —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω—ñ –º–æ–¥—É–ª—ñ –¥–ª—è —Ä–æ–∑–≤–∏—Ç–∫—É soft skills'}

–ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–õ–ò–í–Ü –ü–†–ê–í–ò–õ–ê –î–õ–Ø –ü–û–°–ò–õ–ê–ù–¨:
1. –í–°–Ü URL –º–∞—é—Ç—å –±—É—Ç–∏ –†–ï–ê–õ–¨–ù–ò–ú–ò —Ç–∞ –†–û–ë–û–ß–ò–ú–ò
2. –î–ª—è –≤—ñ–¥–µ–æ: –¢–Ü–õ–¨–ö–ò —ñ—Å–Ω—É—é—á—ñ YouTube –≤—ñ–¥–µ–æ (youtube.com/watch?v=...)
3. –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—ó: –¢–Ü–õ–¨–ö–ò –≤—ñ–¥–æ–º—ñ —Å–∞–π—Ç–∏ (developer.mozilla.org, docs.microsoft.com, github.com/docs)
4. –ó–ê–ë–û–†–û–ù–ï–ù–û –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è (internal.*, intranet.*, *.organization.com)
5. –Ø–∫—â–æ –Ω–µ –∑–Ω–∞—î—à —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è - –ù–ï –¥–æ–¥–∞–≤–∞–π —Ä–µ—Å—É—Ä—Å –≤–∑–∞–≥–∞–ª—ñ
6. resources –º–∞—Å–∏–≤ –º–æ–∂–µ –±—É—Ç–∏ –ü–û–†–û–ñ–ù–Ü–ú, —è–∫—â–æ –Ω–µ–º–∞—î –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–∏—Ö –ø–æ—Å–∏–ª–∞–Ω—å

–§–æ—Ä–º–∞—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:
{
  "modules": [
    {
      "title": "...",
      "description": "...",
      "duration": 25,
      "category": "...",
      "difficulty": "beginner",
      "content": [...],
      "resources": [...]
    }
  ]
}`;

    console.log('Calling Lovable AI...');
    
    const response = await fetch('https://ai.gateway.lovable.dev/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${lovableApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'google/gemini-2.5-flash',
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: userPrompt }
        ],
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      console.error('Lovable AI error:', response.status, errorText);
      throw new Error(`AI API error: ${response.status}`);
    }

    const aiResponse = await response.json();
    console.log('AI Response received');
    
    const generatedContent = aiResponse.choices[0].message.content;
    let modulesData;
    
    try {
      // Try to extract JSON from markdown code blocks if present
      const jsonMatch = generatedContent.match(/```json\s*([\s\S]*?)\s*```/) || 
                       generatedContent.match(/```\s*([\s\S]*?)\s*```/) ||
                       [null, generatedContent];
      
      const jsonContent = jsonMatch[1] || generatedContent;
      const parsed = JSON.parse(jsonContent.trim());
      modulesData = parsed.modules || parsed;
      
      if (!Array.isArray(modulesData)) {
        throw new Error('Generated content is not an array');
      }
    } catch (parseError) {
      console.error('Failed to parse AI response:', parseError);
      console.error('Raw response:', generatedContent);
      throw new Error('Invalid AI response format');
    }

    // Save modules to database
    const modulesToInsert = modulesData.map((module: any) => {
      // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ä–µ—Å—É—Ä—Å–∏ - –≤–∏–¥–∞–ª—è—î–º–æ –≤–∏–≥–∞–¥–∞–Ω—ñ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
      const validResources = (module.resources || []).filter((resource: any) => {
        if (!resource.url) return false;
        // –í–∏–¥–∞–ª—è—î–º–æ –≤–∏–≥–∞–¥–∞–Ω—ñ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
        if (resource.url.includes('internal.') || 
            resource.url.includes('intranet.') ||
            resource.url.includes('organization.com')) {
          console.log('Filtered out fake internal URL:', resource.url);
          return false;
        }
        // –ó–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ä–µ–∞–ª—å–Ω—ñ –¥–æ–º–µ–Ω–∏
        return resource.url.startsWith('http://') || resource.url.startsWith('https://');
      });

      return {
        organization_id: organizationId,
        user_id: userId,
        position_id: userPositions?.[0]?.position_id || null,
        title: module.title,
        description: module.description,
        duration: module.duration,
        category: module.category,
        difficulty: module.difficulty,
        content: module.content || [],
        resources: validResources,
        completed: false,
      };
    });

    const { data: insertedModules, error: insertError } = await supabase
      .from('learning_modules')
      .insert(modulesToInsert)
      .select();

    if (insertError) {
      console.error('Error inserting modules:', insertError);
      throw insertError;
    }

    console.log('Generated and saved modules:', insertedModules?.length || 0);

    return new Response(
      JSON.stringify({ 
        success: true, 
        modules: insertedModules,
        count: insertedModules?.length || 0
      }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );

  } catch (error) {
    console.error('Error in generate-learning-modules:', error);
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    return new Response(
      JSON.stringify({ error: errorMessage }),
      { status: 500, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    );
  }
});
